{
  "address": "0x7Cf2893F243858D68ce77f5D0D8114836F3097DD",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Multicall.Call[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "aggregate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        },
        {
          "internalType": "bytes[]",
          "name": "returnData",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getBlockHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentBlockCoinbase",
      "outputs": [
        {
          "internalType": "address",
          "name": "coinbase",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentBlockDifficulty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "difficulty",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentBlockGasLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "gaslimit",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentBlockTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "getEthBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastBlockHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "blockHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7e362753ce8ce1ced696c843aa32a4d2902173553f140b981ae02c72a822b5d1",
  "receipt": {
    "to": null,
    "from": "0x000Cc9D2c0eDAD4C774D2716E04657C800357a0d",
    "contractAddress": "0x7Cf2893F243858D68ce77f5D0D8114836F3097DD",
    "transactionIndex": 0,
    "gasUsed": "358576",
    "logsBloom": "0x
    "blockHash": "0x00005200000027fc09021085c5c8177ccdfb308db16770a18ed31d8d05afdbc8",
    "transactionHash": "0x7e362753ce8ce1ced696c843aa32a4d2902173553f140b981ae02c72a822b5d1",
    "logs": [],
    "blockNumber": 19613108,
    "cumulativeGasUsed": "358576",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "df3edd3dfe2c2be19942dd7c8f7a87fb",
  "metadata": "{\"compiler\":{\"version\":\"0.6.7+commit.b8d736ae\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct Multicall.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"aggregate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"returnData\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getBlockHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockCoinbase\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"coinbase\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockDifficulty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"difficulty\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockGasLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gaslimit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getEthBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastBlockHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"blockHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Michael Elliot <mike@makerdao.com>Joshua Levine <joshua@makerdao.com>Nick Johnson <arachnid@notdot.net>\",\"methods\":{},\"title\":\"Multicall - Aggregate results from multiple read-only function calls\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/Multicall.sol\":\"Multicall\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/Multicall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\n/// @title Multicall - Aggregate results from multiple read-only function calls\\r\\n/// @author Michael Elliot <mike@makerdao.com>\\r\\n/// @author Joshua Levine <joshua@makerdao.com>\\r\\n/// @author Nick Johnson <arachnid@notdot.net>\\r\\n\\r\\ncontract Multicall {\\r\\n    struct Call {\\r\\n        address target;\\r\\n        bytes callData;\\r\\n    }\\r\\n    function aggregate(Call[] memory calls) public returns (uint256 blockNumber, bytes[] memory returnData) {\\r\\n        blockNumber = block.number;\\r\\n        returnData = new bytes[](calls.length);\\r\\n        for(uint256 i = 0; i < calls.length; i++) {\\r\\n            (bool success, bytes memory ret) = calls[i].target.call(calls[i].callData);\\r\\n            require(success);\\r\\n            returnData[i] = ret;\\r\\n        }\\r\\n    }\\r\\n    // Helper functions\\r\\n    function getEthBalance(address addr) public view returns (uint256 balance) {\\r\\n        balance = addr.balance;\\r\\n    }\\r\\n    function getBlockHash(uint256 blockNumber) public view returns (bytes32 blockHash) {\\r\\n        blockHash = blockhash(blockNumber);\\r\\n    }\\r\\n    function getLastBlockHash() public view returns (bytes32 blockHash) {\\r\\n        blockHash = blockhash(block.number - 1);\\r\\n    }\\r\\n    function getCurrentBlockTimestamp() public view returns (uint256 timestamp) {\\r\\n        timestamp = block.timestamp;\\r\\n    }\\r\\n    function getCurrentBlockDifficulty() public view returns (uint256 difficulty) {\\r\\n        difficulty = block.difficulty;\\r\\n    }\\r\\n    function getCurrentBlockGasLimit() public view returns (uint256 gaslimit) {\\r\\n        gaslimit = block.gaslimit;\\r\\n    }\\r\\n    function getCurrentBlockCoinbase() public view returns (address coinbase) {\\r\\n        coinbase = block.coinbase;\\r\\n    }\\r\\n}\",\"keccak256\":\"0xaeb9b864b9a5ebc619edd6a79fb2d9ce87b83c6d75b6c64985e56bdc5ca86de0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610586806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c806372425d9d1161005b57806372425d9d146100e757806386d516e8146100ef578063a8b0574e146100f7578063ee82ac5e1461010c57610088565b80630f28c97d1461008d578063252dba42146100ab57806327e86d6e146100cc5780634d2301cc146100d4575b600080fd5b61009561011f565b6040516100a29190610470565b60405180910390f35b6100be6100b936600461033b565b610123565b6040516100a2929190610479565b610095610253565b6100956100e2366004610319565b61025c565b610095610276565b61009561027a565b6100ff61027e565b6040516100a2919061044f565b61009561011a36600461041b565b610282565b4290565b8051439060609067ffffffffffffffff8111801561014057600080fd5b5060405190808252806020026020018201604052801561017457816020015b606081526020019060019003908161015f5790505b50905060005b835181101561024d576000606085838151811061019357fe5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff168684815181106101c157fe5b6020026020010151602001516040516101da9190610433565b6000604051808303816000865af19150503d8060008114610217576040519150601f19603f3d011682016040523d82523d6000602084013e61021c565b606091505b50915091508161022b57600080fd5b8084848151811061023857fe5b6020908102919091010152505060010161017a565b50915091565b60001943014090565b73ffffffffffffffffffffffffffffffffffffffff163190565b4490565b4590565b4190565b4090565b803573ffffffffffffffffffffffffffffffffffffffff811681146102aa57600080fd5b92915050565b600082601f8301126102c0578081fd5b813567ffffffffffffffff8111156102d6578182fd5b6102e9601f8201601f19166020016104f9565b915080825283602082850101111561030057600080fd5b8060208401602084013760009082016020015292915050565b60006020828403121561032a578081fd5b6103348383610286565b9392505050565b6000602080838503121561034d578182fd5b823567ffffffffffffffff80821115610364578384fd5b81850186601f820112610375578485fd5b8035925081831115610385578485fd5b61039284858502016104f9565b83815284810190828601875b8681101561040c5781358501604080601f19838f030112156103be578a8bfd5b6103c7816104f9565b6103d38e8c8501610286565b815281830135898111156103e5578c8dfd5b6103f38f8d838701016102b0565b828d01525086525050928701929087019060010161039e565b50909998505050505050505050565b60006020828403121561042c578081fd5b5035919050565b60008251610445818460208701610520565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b90815260200190565b600060408201848352602060408185015281855180845260608601915060608382028701019350828701855b828110156104eb57878603605f19018452815180518088526104cc81888a01898501610520565b601f01601f1916969096018501955092840192908401906001016104a5565b509398975050505050505050565b60405181810167ffffffffffffffff8111828210171561051857600080fd5b604052919050565b60005b8381101561053b578181015183820152602001610523565b8381111561054a576000848401525b5050505056fea2646970667358221220b24a7c370d6e50233c59368f3ebcb3c753cfe21e91dc67ba1a5ed47e69478af164736f6c63430006070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c806372425d9d1161005b57806372425d9d146100e757806386d516e8146100ef578063a8b0574e146100f7578063ee82ac5e1461010c57610088565b80630f28c97d1461008d578063252dba42146100ab57806327e86d6e146100cc5780634d2301cc146100d4575b600080fd5b61009561011f565b6040516100a29190610470565b60405180910390f35b6100be6100b936600461033b565b610123565b6040516100a2929190610479565b610095610253565b6100956100e2366004610319565b61025c565b610095610276565b61009561027a565b6100ff61027e565b6040516100a2919061044f565b61009561011a36600461041b565b610282565b4290565b8051439060609067ffffffffffffffff8111801561014057600080fd5b5060405190808252806020026020018201604052801561017457816020015b606081526020019060019003908161015f5790505b50905060005b835181101561024d576000606085838151811061019357fe5b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff168684815181106101c157fe5b6020026020010151602001516040516101da9190610433565b6000604051808303816000865af19150503d8060008114610217576040519150601f19603f3d011682016040523d82523d6000602084013e61021c565b606091505b50915091508161022b57600080fd5b8084848151811061023857fe5b6020908102919091010152505060010161017a565b50915091565b60001943014090565b73ffffffffffffffffffffffffffffffffffffffff163190565b4490565b4590565b4190565b4090565b803573ffffffffffffffffffffffffffffffffffffffff811681146102aa57600080fd5b92915050565b600082601f8301126102c0578081fd5b813567ffffffffffffffff8111156102d6578182fd5b6102e9601f8201601f19166020016104f9565b915080825283602082850101111561030057600080fd5b8060208401602084013760009082016020015292915050565b60006020828403121561032a578081fd5b6103348383610286565b9392505050565b6000602080838503121561034d578182fd5b823567ffffffffffffffff80821115610364578384fd5b81850186601f820112610375578485fd5b8035925081831115610385578485fd5b61039284858502016104f9565b83815284810190828601875b8681101561040c5781358501604080601f19838f030112156103be578a8bfd5b6103c7816104f9565b6103d38e8c8501610286565b815281830135898111156103e5578c8dfd5b6103f38f8d838701016102b0565b828d01525086525050928701929087019060010161039e565b50909998505050505050505050565b60006020828403121561042c578081fd5b5035919050565b60008251610445818460208701610520565b9190910192915050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b90815260200190565b600060408201848352602060408185015281855180845260608601915060608382028701019350828701855b828110156104eb57878603605f19018452815180518088526104cc81888a01898501610520565b601f01601f1916969096018501955092840192908401906001016104a5565b509398975050505050505050565b60405181810167ffffffffffffffff8111828210171561051857600080fd5b604052919050565b60005b8381101561053b578181015183820152602001610523565b8381111561054a576000848401525b5050505056fea2646970667358221220b24a7c370d6e50233c59368f3ebcb3c753cfe21e91dc67ba1a5ed47e69478af164736f6c63430006070033",
  "devdoc": {
    "author": "Michael Elliot <mike@makerdao.com>Joshua Levine <joshua@makerdao.com>Nick Johnson <arachnid@notdot.net>",
    "methods": {},
    "title": "Multicall - Aggregate results from multiple read-only function calls"
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}